import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york': 'new_york_city.csv',
              'washington': 'washington.csv' }
MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'all']

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')

    cities = ['chicago', 'new york', 'washington']
    city = input("Which city would you prefer to analyze; Chicago, New York or Washington?: ").lower()
    while city not in cities:
        print("Whoops, there seems to be some problem with your input here. Please try again.")
        city = input("Please enter valid city: ").lower()
        continue


    months = ['january', 'february', 'march', 'april', 'may', 'june', 'all']
    month = input("Now, please select a month to filter by. Alternatively, please enter \"all\" if you have no preference: ").lower()
    while month not in months:
        print("Hmm, that doesn't look right, please enter a valid month or type \"all\" to continue: ")
        month = input("Please enter valid month:  ").lower()
        continue

    days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', 'all']
    day = input("Finally, let's choose a day of the week to focus on or enter \"all\" for unfiltered results: ").lower()
    while day not in days:
        print("Let's try again, please enter a valid day of the week or else type \"all\": ")
        day = input("Please enter valid day: ").lower()
        continue


    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])

    df['Start Time'] = pd.to_datetime(df['Start Time'])

    df['month'] = df['Start Time'].dt.month_name()
    df['day_of_week'] = df['Start Time'].dt.day_name()
    df['hour'] = df['Start Time'].dt.hour


    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

    if day != 'all':
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()



    common_month = df['month'].mode()[0]
    print("The most frequent month for travel is: ",  common_month)


    common_day = df['day_of_week'].mode()[0]
    print("The most frequent day for travel is: ", common_day)

    common_hour = df['hour'].mode()[0]
    print("The most frequent hour for travel is: ", common_hour)



    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)






def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    common_start = df['Start Station'].mode()[0]
    print('Most popular start station: ', common_start)

    # TO DO: display most commonly used end station
    common_end = df['End Station'].mode()[0]
    print('Most popular end station: ', common_end)

    # TO DO: display most frequent combination of start station and end station trip


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_time = df['Trip Duration'].sum()
    print('Total travel time of all users (in seconds): ', total_time)

    # TO DO: display mean travel time
    mean_time = df['Trip Duration'].mean()
    print('Mean travel time (in seconds): ', mean_time)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types

    user_types = df['User Type'].value_counts()
    print('Count of Customers & Subscibers:\n',user_types.to_string())

    # TO DO: Display counts of gender
    try:
        gender_count = df['Gender'].value_counts()
        print('Gender split:\n',gender_count.to_string())
    except KeyError:
        print('Gender information not available for chosen location.')

    # TO DO: Display earliest, most recent, and most common year of birth

    try:
        oldest = df['Birth Year'].min()
        print('The earliest recorded birth year is: ', oldest)

        youngest = df['Birth Year'].max()
        print('The most recent recorded birth year is: ', youngest)

        common_year = df['Birth Year'].mode()[0]
        print('Most common birth year for users: ', common_year)
    except KeyError:
        print('Birth year data not available for chosen location.')


    return df
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
